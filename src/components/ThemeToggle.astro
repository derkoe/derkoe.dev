---

---

<div class="theme-toggle-container">
  <button id="theme-toggle" aria-label="Toggle theme menu" aria-haspopup="true">
    <svg
      width="20px"
      height="20px"
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
    >
      <path
        class="sun"
        fill-rule="evenodd"
        d="M12 17.5a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11zm0 1.5a7 7 0 1 0 0-14 7 7 0 0 0 0 14zm12-7a.8.8 0 0 1-.8.8h-2.4a.8.8 0 0 1 0-1.6h2.4a.8.8 0 0 1 .8.8zM4 12a.8.8 0 0 1-.8.8H.8a.8.8 0 0 1 0-1.6h2.5a.8.8 0 0 1 .8.8zm16.5-8.5a.8.8 0 0 1 0 1l-1.8 1.8a.8.8 0 0 1-1-1l1.7-1.8a.8.8 0 0 1 1 0zM6.3 17.7a.8.8 0 0 1 0 1l-1.7 1.8a.8.8 0 1 1-1-1l1.7-1.8a.8.8 0 0 1 1 0zM12 0a.8.8 0 0 1 .8.8v2.5a.8.8 0 0 1-1.6 0V.8A.8.8 0 0 1 12 0zm0 20a.8.8 0 0 1 .8.8v2.4a.8.8 0 0 1-1.6 0v-2.4a.8.8 0 0 1 .8-.8zM3.5 3.5a.8.8 0 0 1 1 0l1.8 1.8a.8.8 0 1 1-1 1L3.5 4.6a.8.8 0 0 1 0-1zm14.2 14.2a.8.8 0 0 1 1 0l1.8 1.7a.8.8 0 0 1-1 1l-1.8-1.7a.8.8 0 0 1 0-1z"
      ></path>
      <path
        class="moon"
        fill-rule="evenodd"
        d="M16.5 6A10.5 10.5 0 0 1 4.7 16.4 8.5 8.5 0 1 0 16.4 4.7l.1 1.3zm-1.7-2a9 9 0 0 1 .2 2 9 9 0 0 1-11 8.8 9.4 9.4 0 0 1-.8-.3c-.4 0-.8.3-.7.7a10 10 0 0 0 .3.8 10 10 0 0 0 9.2 6 10 10 0 0 0 4-19.2 9.7 9.7 0 0 0-.9-.3c-.3-.1-.7.3-.6.7a9 9 0 0 1 .3.8z"
      ></path>
    </svg>
  </button>
  <div id="theme-menu" class="theme-menu">
    <button data-theme="light" class="theme-option">
      <svg
        width="16px"
        height="16px"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
      >
        <path
          fill-rule="evenodd"
          d="M12 17.5a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11z"></path>
      </svg>
      Light
    </button>
    <button data-theme="dark" class="theme-option">
      <svg
        width="16px"
        height="16px"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
      >
        <path
          fill-rule="evenodd"
          d="M16.5 6A10.5 10.5 0 0 1 4.7 16.4 8.5 8.5 0 1 0 16.4 4.7l.1 1.3z"
        ></path>
      </svg>
      Dark
    </button>
    <button data-theme="system" class="theme-option">
      <svg
        width="16px"
        height="16px"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
      >
        <path
          fill-rule="evenodd"
          d="M4 2a2 2 0 00-2 2v16a2 2 0 002 2h16a2 2 0 002-2V4a2 2 0 00-2-2H4zm14 2H6v12h12V4z"
        ></path>
      </svg>
      System
    </button>
  </div>
</div>

<style>
  .theme-toggle-container {
    position: relative;
    display: inline-block;
  }

  #theme-toggle {
    padding: 0.5rem;
    background: none;
    border: none;
    cursor: pointer;
    border-radius: 50%;
    transition: background-color 0.3s;
  }

  #theme-toggle:hover {
    background-color: var(--hover-bg);
  }

  .sun {
    fill: var(--text);
  }
  .moon {
    fill: transparent;
  }

  :global(.dark) .sun {
    fill: transparent;
  }
  :global(.dark) .moon {
    fill: var(--text);
  }

  .theme-menu {
    position: absolute;
    top: 100%;
    right: 0;
    background-color: var(--background-body);
    border: 1px solid var(--border);
    border-radius: 6px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    padding: 0.5rem;
    margin-top: 0.5rem;
    min-width: 120px;
    display: none;
    z-index: 100;
  }

  .theme-menu.active {
    display: block;
  }

  .theme-option {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem;
    width: 100%;
    text-align: left;
    background: none;
    border: none;
    cursor: pointer;
    border-radius: 4px;
    color: var(--text);
    font-size: 1rem;
  }

  .theme-option:hover {
    background-color: var(--hover-bg);
  }

  .theme-option svg {
    fill: var(--text);
  }

  .theme-option.active {
    font-weight: bold;
    color: var(--accent);
  }

  .theme-option.active svg {
    fill: var(--accent);
  }
</style>

<script>
  type ThemeType = "light" | "dark" | "system";

  const getTheme = (): ThemeType => {
    if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
      const storedTheme = localStorage.getItem("theme");
      if (
        storedTheme === "light" ||
        storedTheme === "dark" ||
        storedTheme === "system"
      ) {
        return storedTheme;
      }
    }
    return "system";
  };

  const setTheme = (theme: ThemeType): void => {
    const element = document.documentElement;

    if (
      theme === "dark" ||
      (theme === "system" &&
        window.matchMedia("(prefers-color-scheme: dark)").matches)
    ) {
      element.classList.add("dark");
    } else {
      element.classList.remove("dark");
    }

    const themeOptions = document.querySelectorAll(".theme-option");
    themeOptions.forEach(option => {
      const buttonEl = option as HTMLElement;
      if (buttonEl.dataset.theme === theme) {
        buttonEl.classList.add("active");
      } else {
        buttonEl.classList.remove("active");
      }
    });

    localStorage.setItem("theme", theme);
  };

  // Initialize theme
  const currentTheme = getTheme();
  setTheme(currentTheme);

  // Handle theme toggle button click
  const themeToggle = document.getElementById("theme-toggle");
  const themeMenu = document.getElementById("theme-menu");

  themeToggle?.addEventListener("click", () => {
    themeMenu?.classList.toggle("active");
  });

  // Handle theme option selection
  const themeOptions = document.querySelectorAll(".theme-option");
  themeOptions.forEach(option => {
    const buttonEl = option as HTMLElement;
    if (buttonEl.dataset.theme === currentTheme) {
      buttonEl.classList.add("active");
    }

    option.addEventListener("click", () => {
      const theme = buttonEl.dataset.theme as ThemeType;
      setTheme(theme);
      themeMenu?.classList.remove("active");
    });
  });

  // Close menu when clicking outside
  document.addEventListener("click", event => {
    if (!themeToggle || !themeMenu) return;

    const target = event.target as Node;
    const isClickInside =
      themeToggle.contains(target) || themeMenu.contains(target);

    if (!isClickInside && themeMenu.classList.contains("active")) {
      themeMenu.classList.remove("active");
    }
  });

  // Listen for system preference changes
  if (window.matchMedia) {
    window
      .matchMedia("(prefers-color-scheme: dark)")
      .addEventListener("change", () => {
        if (getTheme() === "system") {
          setTheme("system");
        }
      });
  }
</script>
